#!/bin/bash
#
# This tests ldmsd run with static config files (as would normally
# happen as a system service) and shut down with a signal.
# all daemons run on the same node as this script.
#
bypass=0
if test -z "$allowroot"; then
	allowroot=0
fi
export prefix=@prefix@
export exec_prefix=@exec_prefix@
export libdir=@libdir@
export BUILDDIR=@prefix@
if ! test -f $libdir/ovis-ldms-configvars.sh; then
	echo "$libdir/ovis-ldms-configvars.sh not found"
	exit 1
fi
. $libdir/ovis-ldms-configvars.sh
export pkglibdir=${ovis_ldms_pkglibdir}
export PACKAGE_TARNAME=ovis-ldms
export docdir=${ovis_ldms_datarootdir}/doc/${PACKAGE_TARNAME}
export exdir=$docdir
# default log is debug
export LOG_LEVEL=DEBUG

if test -z "$ZAP_LIBPATH"; then
	ZAP_LIBPATH=$ovis_ldms_plugins
fi
export ZAP_LIBPATH
if test -z "$LDMSD_PLUGIN_LIBPATH"; then
	LDMSD_PLUGIN_LIBPATH=$ovis_ldms_plugins
fi
export LDMSD_PLUGIN_LIBPATH
export LD_LIBRARY_PATH=${ovis_ldms_plugins_rpath}:${BUILDDIR}/lib:${exec_prefix}/lib:$ovis_ldms_plugins:$LD_LIBRARY_PATH
export PYTHONPATH=${ovis_ldms_pythondir}:$PYTHONPATH

export LDMSD_LOG_DATE_TIME=1
export LDMSD_LOG_TIME_SEC=1

function clusage {
cat << EOF
$0: usage:
$0 -l
$0 -h
$0 <input_file> [test_dir]
	-h produces help message
	-l produces list of canned test names
See man ldms-static-test(8) for details.
EOF
}
input=$1
export input
if test -z "$1"; then
	echo "FAIL: no input file to $0"
	exit 1
fi
if test "$1" = "-h"; then
	clusage
	exit 0
fi
if test "$1" = "-l"; then
	echo "Canned tests are:"
	echo "$exdir/examples/static-test/"
	(cd $exdir/examples/static-test; cat .canned)
	exit 0
fi
if test $(basename $1) = $1 -a ! -f $1; then
	if test -f $exdir/examples/static-test/$1; then
		input=$exdir/examples/static-test/$1
	fi
fi
if ! test -f $input -a -r $input; then
	echo FAIL: cannot read test input $1
	exit 1
fi
export testname=`basename $1`
# get_prolog_name insertfile basefile
# find prolog file in . or adjacent to basefile
# or in standard directory
function get_prolog_name () {
	local rfile
	if test "$#" = "0"; then
		return ""
	fi
	pfile=$1
	basefile=$2
	rfile=$pfile
	# check unqualified path names not existing in pwd
	if test $(basename $pfile) = $pfile -a ! -f $pfile; then
		# in standard place?
		if test -f $exdir/examples/static-test/$pfile; then
			rfile=$exdir/examples/static-test/$pfile
		fi
		if test -n "$2"; then
			basedir=$(dirname $basefile)
			if test -f $basedir/$pfile; then
				rfile=$basedir/$pfile
			fi
		fi
	fi
	if ! test -f $rfile -a -r $rfile; then
		echo "FAIL: cannot find test prolog $pfile in . $exdir/examples/static-test or next to $basefile."
		rfile=""
		exit 1
	fi
	echo $rfile
}

TESTDIR=$2

if test -z "$2"; then
	TESTDIR=`pwd`/ldmstest/$testname
	TESTDIR_FAST=/dev/shm/$USER/ldmstest/$testname/$$
else
	TESTDIR_FAST=/dev/shm/$USER/ldmstest/$testname/$TESTDIR/$$
fi
TESTDIR_FASTroot=/dev/shm/$USER/ldmstest/$testname
export TESTDIR_FAST
export TESTDIR
# TESTDIR must be on a global file system
# TESTDIR_FAST must be on a node-local memory or nvme

if test -z "$HOST"; then
	# used for ldms_ls
	export HOST=localhost
fi
if test -z "$XPRT"; then
	# used for ldms_ls and ldmsd
	export XPRT=sock
fi
declare -a ports

# turn on valgrind usage in ldmsd and ldms_ls.
# VG and VGARGS may be specified to override the default
# valgrind in path and the default valgrind options.
# by default -v --log-file=something are provided.
#
function vgon {
  usevg=1
}

# turn off valgrind usage
function vgoff {
  usevg=0
}

log_level_list="DEBUG|ERROR|INFO|ALL|QUIET|WARNING|CRITICAL"
function SET_LOG_LEVEL {

	lvl=$1
	case $lvl in
	DEBUG|ERROR|INFO|ALL|QUIET|WARNING|CRITICAL)
		;;
	*)
		echo unknown log level $1
		echo expected one of $log_level_list
		bypass=1
		return 1
		;;
	esac
	export LOG_LEVEL=$lvl
	echo "LOG_LEVEL=$LOG_LEVEL"
	return 0
}

# clear old daemons in the range we're expected and define the
# port variables.
did_daemons=0
function DAEMONS {
	if test $did_daemons = "1"; then
		return
	fi
	if test "$#" = "1"; then
		ALL_DAEMONS=$(seq $1)
	else
		ALL_DAEMONS="$*"
	fi
	for i in $ALL_DAEMONS; do
		/bin/rm -f ${LOGDIR}/$i.txt ${LOGDIR}/vg.$i ${LOGDIR}/teardown.$i.txt ${LOGDIR}/$i.stdio
		/bin/rm -f ${LDMSD_RUN}/revconf.$i ${LDMSD_RUN}/conf.$i ${LDMSD_RUN}/yaml.$i ${LDMSD_RUN}/yaml.$i.pre-sed ${LDMSD_RUN}/start.$i
		ports[$i]=$(($portbase + $i))
		eval export port$i=${ports[$i]}
		binname=ldmsd.${ports[$i]}
		pkill -9 $binname
		/bin/rm -f $LDMSD_RUN/$binname
		if test -f $pkglibdir/ldmsd; then
			ln -s $pkglibdir/ldmsd $LDMSD_RUN/$binname
		else
			ln -s ${BUILDDIR}/sbin/ldmsd $LDMSD_RUN/$binname
		fi
	done
	did_daemons=1
}

# LDMSD number-list launch a daemon for each number
# expecting to find $input.$i configuration files.
# ${i} will be exported to the environment of ldmsd.
function LDMSD {
	if test "$bypass" = "1"; then
		echo skipping sleep
		return 0
	fi
	yaml_epilogs=""
	yaml_prologs=""
	prologs=""
	loopprologs=""
	bug=0
	local OPTIND
	local cloneinput=0
	startwait=2000000
	use_yaml=0
	use_conf=0
	sed_vars=""
	while getopts ":p:P:s:cyzQ:R:S:" opt; do
		case $opt in
		p)
			f="$OPTARG"
			use_conf=1
			prologs="$prologs $OPTARG"
			if test "${f:0:1}" = "-"; then
				echo "LDMSD: -p expected filename"
				file=""
				bug=2
				((OPTIND--))
			fi
			;;
		P)
			f="$OPTARG"
			use_conf=1
			# arg is filename,$PLIST
			# fixme: order should matter, which means we
			# would need to expand args here and include
			# tmp result in prologs list
			loopprologs="$loopprologs $OPTARG"
			if test "${f:0:1}" = "-"; then
				echo "LDMSD: -P expected filename,PLIST"
				file=""
				bug=2
				((OPTIND--))
			fi
			;;
		c)
			cloneinput=1;
			use_conf=1
			# recycle input to list of similar daemons
			# after all prolog processing is done
			;;
		y)
			use_yaml=1
			;;
		z)
			cloneinput=1
			use_yaml=1
			;;
		Q)
			use_yaml=1
			f="$OPTARG"
			yaml_prologs="$yaml_prologs $OPTARG"
			if test "${f:0:1}" = "-"; then
				echo "LDMSD: -Q expected filename"
				file=""
				bug=2
				((OPTIND--))
			fi
			;;
		R)
			use_yaml=1
			f="$OPTARG"
			yaml_epilogs="$yaml_epilogs $OPTARG"
			if test "${f:0:1}" = "-"; then
				echo "LDMSD: -R expected filename"
				file=""
				bug=2
				((OPTIND--))
			fi
			;;
		S)
			use_yaml=1
			sed_vars="$sed_vars $OPTARG"
			;;
		s)
			startwait="$OPTARG";
			;;
		\?)
			echo "Invalid option: -$OPTARG" >&2
			bug=1
			;;
		esac
	done
	if test "$use_conf" = "1" -a "$use_yaml" = "1"; then
		echo "Conflicting options: cannot use both yaml and raw conf inputs"
		bypass=1
		bug=1
	fi
	shift "$((OPTIND - 1))"
	if test "$bug" != "0"; then
		return
	fi

	DAEMONS $*
	clonefile=""
	yamlonce=""
	for i in $*; do
		export i
		if test "$usevg" = "1"; then
			if test -z "$VG"; then
				XVG=valgrind
			else
				XVG=$VG
			fi
			if test -z "$VGARGS"; then
				XVGARGS="-v --log-file=${LOGDIR}/vg.$i$VGTAG.%p"
			else
				XVGARGS="-v --log-file=${LOGDIR}/vg.$i$VGTAG.%p $VGARGS"
			fi
			wrap="$XVG $XVGARGS"
		else
			wrap=""
		fi
		echo starting daemon $i
		# set -x
		if test -n "$HOST"; then
			XPRTHOST=":$HOST"
		fi
		if test $use_conf = "1"; then
			if test -f $input.$i -a -r $input.$i; then
				echo "# generated from $input" > $LDMSD_RUN/conf.$i
				for lf in $loopprologs; do
					loopfile=0
					alist=$(echo $lf | tr , " ")
					for j in $alist; do
						if test $loopfile = "0"; then
							loopfile=$j
							pfn=`get_prolog_name $loopfile $input`
							if test -f "$pfn"; then
								echo "# looped prolog from $pfn" >> $LDMSD_RUN/conf.$i
							else
								echo "# prolog $loopfile MISSING" >> $LDMSD_RUN/conf.$i
								echo "Prolog $loopfile MISSING"
								echo "$pfn"
								bypass=1
								return
							fi
						else
							cat $pfn | sed -e "s/\${j}/$j/g" >> $LDMSD_RUN/conf.$i
						fi
					done
				done
				for pf in $prologs; do
					pfn=`get_prolog_name $pf $input`
					if test -f "$pfn"; then
						echo "# prolog from $pfn" >> $LDMSD_RUN/conf.$i
						cat $pfn >> $LDMSD_RUN/conf.$i
					else
						echo "# prolog $pf MISSING" >> $LDMSD_RUN/conf.$i
						echo "Prolog $pf MISSING"
						echo $pfn
						bypass=1
						return
					fi
				done
				echo "# generated from $input.$i" >> $LDMSD_RUN/conf.$i
				cat $input.$i >> $LDMSD_RUN/conf.$i
				clonefile=$LDMSD_RUN/conf.$i
				ldms-reverse-conf.sh $LDMSD_RUN/conf.$i > $LDMSD_RUN/revconf.$i
				env > $LDMSD_RUN/env.$i
				if test -n "$GDB"; then
					echo "run -x ${XPRT}:${ports[$i]}:${XPRTHOST} -c $LDMSD_RUN/conf.$i -l ${LOGDIR}/$i.txt -v $LOG_LEVEL $LDMSD_EXTRA -r $LDMSD_PIDFILE.$i"
					gdb ldmsd.${ports[$i]}
				else
					echo $wrap ldmsd.${ports[$i]} \
						-x ${XPRT}:${ports[$i]}${XPRTHOST} \
						-c $LDMSD_RUN/conf.$i \
						-l ${LOGDIR}/$i.txt \
						-v $LOG_LEVEL $LDMSD_EXTRA \
						-r $LDMSD_PIDFILE.$i \
					"2>&1 > ${LOGDIR}/$i.stdio &" > $LDMSD_RUN/start.$i
					$wrap ldmsd.${ports[$i]} \
						-x ${XPRT}:${ports[$i]}${XPRTHOST} \
						-c $LDMSD_RUN/conf.$i \
						-l ${LOGDIR}/$i.txt \
						-v $LOG_LEVEL $LDMSD_EXTRA \
						-r $LDMSD_PIDFILE.$i \
						2>&1 > ${LOGDIR}/$i.stdio &
				fi
			else
				if test -z "$clonefile"; then
					echo MISSING input file for DAEMON $i
					clonefile="/tmp"
				fi
				if test -f $clonefile -a $cloneinput = "1"; then
					cp $clonefile $LDMSD_RUN/conf.$i
					ldms-reverse-conf.sh $LDMSD_RUN/conf.$i > $LDMSD_RUN/revconf.$i
					env > $LDMSD_RUN/env.$i
					echo $wrap ldmsd.${ports[$i]} \
						-x ${XPRT}:${ports[$i]}${XPRTHOST} \
						-c $LDMSD_RUN/conf.$i \
						-l ${LOGDIR}/$i.txt \
						-v $LOG_LEVEL $LDMSD_EXTRA \
						-r $LDMSD_PIDFILE.$i \
						"2>&1 > ${LOGDIR}/$i.stdio &" \
						> $LDMSD_RUN/start.$i
					$wrap ldmsd.${ports[$i]} \
						-x ${XPRT}:${ports[$i]}${XPRTHOST} \
						-c $LDMSD_RUN/conf.$i \
						-l ${LOGDIR}/$i.txt \
						-v $LOG_LEVEL $LDMSD_EXTRA \
						-r $LDMSD_PIDFILE.$i \
						2>&1 > ${LOGDIR}/$i.stdio &
				else
					echo IDLE DAEMON $i
					env > $LDMSD_RUN/env.$i
					echo "#" > $LDMSD_RUN/revconf.$i
					echo ldmsd.${ports[$i]} -x ${XPRT}:${ports[$i]}${XPRTHOST} \
						-l ${LOGDIR}/$i.txt \
						-v $LOG_LEVEL \
						-r $LDMSD_PIDFILE.$i \
						"2>&1 > ${LOGDIR}/$i.stdio &" \
						> $LDMSD_RUN/start.$i
					ldmsd.${ports[$i]} -x ${XPRT}:${ports[$i]}${XPRTHOST} \
						-l ${LOGDIR}/$i.txt \
						-v $LOG_LEVEL \
						-r $LDMSD_PIDFILE.$i \
						2>&1 > ${LOGDIR}/$i.stdio &
				fi
			fi
		else
		##########################################################
		# yaml input case
		# because yaml map keys cannot be repeated, we must generate
		# .yaml files for each daemon separately if we want to assemble
		# from reusable parts without ansible
			if test -f $input.$i -a -r $input.$i; then
				echo "# generated from $input" > $LDMSD_RUN/yaml.$i
				for pf in $yaml_prologs; do
					pfn=`get_prolog_name $pf $input`
					if test -f "$pfn"; then
						echo "# prolog from $pfn" >> $LDMSD_RUN/yaml.$i
						cat $pfn >> $LDMSD_RUN/yaml.$i
					else
						echo "# prolog $pf MISSING" >> $LDMSD_RUN/yaml.$i
						echo "Prolog $pf MISSING"
						echo $pfn
						bypass=1
						return
					fi
				done
				echo "# generated from $input.$i" > $LDMSD_RUN/yaml.$i
				cat $input.$i >> $LDMSD_RUN/yaml.$i
				for pf in $yaml_epilogs; do
					pfn=`get_prolog_name $pf $input`
					if test -f "$pfn"; then
						echo "# epilog from $pfn" >> $LDMSD_RUN/yaml.$i
						cat $pfn >> $LDMSD_RUN/yaml.$i
					else
						echo "# epilog $pf MISSING" >> $LDMSD_RUN/yaml.$i
						echo "Epilog $pf MISSING"
						echo $pfn
						bypass=1
						return
					fi
				done
				clonefile=$LDMSD_RUN/yaml.$i
			else
				if test -z "$clonefile"; then
                                        echo MISSING input file for DAEMON $i
                                        clonefile="/tmp"
                                fi
				if test -f $clonefile -a $cloneinput = "1"; then
					cp $clonefile $LDMSD_RUN/yaml.$i
				fi
			fi
			/bin/rm -f $LDMSD_RUN/conf.$i
			if test -n "$sed_vars"; then
				sf=$LDMSD_RUN/.sed.$i
				echo $sf
				for sv in $sed_vars; do
					svv=${!sv}
					echo $svv
					echo "s%@"${sv}"@%"$svv"%g" >> $sf
				done
				sed -f $sf -i.pre-sed $LDMSD_RUN/yaml.$i
			fi
			ldmsd_yaml_parser --ldms_config $LDMSD_RUN/yaml.$i --daemon_name localhost$i > $LDMSD_RUN/conf.$i
			stat=$?
			if test "$stat" = "0"; then
				ldms-reverse-conf.sh $LDMSD_RUN/conf.$i > $LDMSD_RUN/revconf.$i
				env > $LDMSD_RUN/env.$i
				if test -n "$GDB"; then
					echo "run -x ${XPRT}:${ports[$i]}:${XPRTHOST} -y $LDMSD_RUN/yaml.$i --daemon_name $HOST:${ports[$i]} -l ${LOGDIR}/$i.txt -v $LOG_LEVEL $LDMSD_EXTRA -r $LDMSD_PIDFILE.$i"
					gdb ldmsd.${ports[$i]}
				else
					echo $wrap ldmsd.${ports[$i]} \
						-y $LDMSD_RUN/yaml.$i \
						--daemon_name localhost$i \
						-l ${LOGDIR}/$i.txt \
						-v $LOG_LEVEL $LDMSD_EXTRA \
						-r $LDMSD_PIDFILE.$i \
					"2>&1 > ${LOGDIR}/$i.stdio &" > $LDMSD_RUN/start.$i
					$wrap ldmsd.${ports[$i]} \
						-y $LDMSD_RUN/yaml.$i \
						--daemon_name localhost$i \
						-l ${LOGDIR}/$i.txt \
						-v $LOG_LEVEL $LDMSD_EXTRA \
						-r $LDMSD_PIDFILE.$i \
						2>&1 > ${LOGDIR}/$i.stdio &
				fi
			else
				echo "Couldn't create localhost$i from yaml $LDMSD_RUN/yaml.$i"
				bypass=1
				return
			fi
		fi
		# end generating conf.i and revconf.i and starting

		# assume gnu sleep and bc exist, because usleep deprecated
		#sleep $(echo "0.000001 * $startwait" |bc)
		nwait=0
		nwait_max=$(($startwait / 100000)) ; # tenth second ticks
		while ! test -f $LDMSD_PIDFILE.$i; do
			((nwait++))
			sleep 0.1
			if test $nwait -ge $nwait_max; then
				echo FAIL: failed to start $i. check ${LOGDIR}/$i.txt
				bypass=1
				break;
			fi
		done
	done
}

# MESSAGE print arguments to output
function MESSAGE  {
	if test "$bypass" = "1"; then
		return 0
	fi
	echo $*
}

#
function LDMS_LS {
	if test "$bypass" = "1"; then
		return 0
	fi
	nodes=$1
	shift
	for i in $nodes; do
		if test "$usevg" = "1"; then
			if test -z "$VG"; then
				XVG=valgrind
			else
				XVG=$VG
			fi
			if test -z "$VGARGS"; then
				XVGARGS="-v --log-file=${LOGDIR}/vgls.$i$VGTAG.%p"
			else
				XVGARGS="-v --log-file=${LOGDIR}/vgls.$i$VGTAG.%p $VGARGS"
			fi
			wrap="$XVG $XVGARGS"
		else
			wrap=""
		fi
		if ! test -f "$LDMSD_PIDFILE.$i"; then
			echo FAIL: ls of missing daemon $i skipped. check ${LOGDIR}/$i.txt
			bypass=1
			break;
		fi
		if test -n "$PORT"; then
			iport=$PORT
		else
			iport=${ports[$i]}
		fi
		echo "ldms_ls  -h $HOST -x $XPRT -p $iport $*"
		$wrap ldms_ls  -h $HOST -x $XPRT -p $iport $*
	done
}

#
function LDMS_STATUS {
	if test "$bypass" = "1"; then
		return 0
	fi
	nodes=$1
	shift
	for i in $nodes; do
		if test "$usevg" = "1"; then
			if test -z "$VG"; then
				XVG=valgrind
			else
				XVG=$VG
			fi
			if test -n "LDMSNET"; then
				XVGSUFF=".$LDMSNET"
			fi
			if test -z "$VGARGS"; then
				VGARGS="-v --log-file=${LOGDIR}/vgls.$i$VGTAG.%p"
			else
				XVGARGS="-v --log-file=${LOGDIR}/vgls.$i$VGTAG.%p$XVGSUFF $VGARGS"
			fi
			wrap="$XVG $XVGARGS"
		else
			wrap=""
		fi
		if ! test -f "$LDMSD_PIDFILE.$i"; then
			echo FAIL: $i: ls of missing daemon $i skipped. check ${LOGDIR}/$i.txt
			bypass=1
			break;
		fi
		if test -n "$PORT"; then
			iport=$PORT
		else
			iport=${ports[$i]}
		fi
		ihost=localhost
		echo "$i: echo status | $wrap ldmsd_controller -h $ihost -x $XPRT -p $iport"
		echo status | $wrap ldmsd_controller  -h $ihost -x $XPRT -p $iport
	done
}

function LDMS_AGG_WAIT {
	# wait until all daemons given have been seen to have the schema named present
	# on the agg daemon given. Set names must be localhost${i}/$schema
	# LDMS_AGG_WAIT agg-daemon agg-timeout schema set-timeout daemon_number*
	# timeouts are integer seconds to wait. 0 or less is infinite wait.
	# checking of the agg daemon is performed by the process rank which launched it,
	# while others wait on the result.
	# aggregator connect retry is 0.5 sec
        # set lookup retries are 0.2 sec
	if test "$bypass" = "1"; then
		return 0
	fi
	agg_retry_interval=0.5
	set_retry_interval=0.2
	aggd=$1
	agg_timeout=$2
	schema=$3
	set_timeout=$4
	shift
	shift
	shift
	shift
	# wait on agg to appear
	if test $agg_timeout -le 0; then
		agg_timeout=1000000000
	fi
	# do the repeated checking
	agg_tend=$(( $(date +%s) + $agg_timeout))
	while /bin/true; do
		sleep $agg_retry_interval
		if test $(date +%s) -gt $agg_tend; then
			echo timeout connecting to aggregator daemon $aggd
			bypass=1
			return 1 ; # all others will timeout
		fi
		if test -n "$PORT"; then
			iport=$PORT
		else
			iport=${ports[$aggd]}
		fi
		if ! test -f "$LDMSD_PIDFILE.$aggd"; then
			continue
		fi
		ihost=localhost
		if ldms_ls -x $XPRT -p $iport -h $ihost -S set_dummy > /dev/null; then
			echo found aggregator $myproc at $(date +%s.%N)
			break
		fi
	done

	declare -a lswait
	# build target set list
	for i in $*; do
		lswait[$i]=1
	done
	if test $set_timeout -le 0; then
		set_timeout=1000000000
	fi
	set_tend=$(( $(date +%s) + $set_timeout))
	if test -n "$PORT"; then
		iport=$PORT
	else
		iport=${ports[$aggd]}
	fi
	ihost=localhost
	while test ${#lswait[@]} -gt 0; do
		sleep $set_retry_interval
		if test $(date +%s) -gt $set_tend; then
			tnow=$(date +%s.%N)
			break
		fi
		echo waiting ${#lswait[@]} sets to appear
		ofile=$TESTDIR_FAST/ldms_agg_wait.out
		while test ${#lswait[@]} -gt 0; do
			timecheck=$(date +%s)
			if test $timecheck -gt $set_tend; then
				echo LDMS_AGG_WAIT sets check timed out at $timecheck
				break
			fi
			if ! test -f "$LDMSD_PIDFILE.$aggd"; then
				echo LDMS_AGG_WAIT: pid of agg disappeared at $timecheck
				break; # agg died? will it restart?
			fi
			if ldms_ls -x $XPRT -p $iport -h $ihost -S $schema > $ofile; then
				if ! test -f $ofile; then
					echo LDMS_AGG_WAIT: failed ldms_ls at $timecheck
					break 2
				fi
				tnow=$(date +%s.%N)
				nl=$(sed -e 's/^ldms.*//' -e 's%^localhost%%' -e  "s%/${schema}.*%%" $ofile)
				/bin/rm -f $ofile
				for i in $nl; do
					if test x${lswait[${i}]} = x1; then
						echo "found set from daemon $i at $tnow";
						unset -v lswait[$i];
					fi
				done
			fi
		done
	done
	if test ${#lswait[@]} -gt 0; then
		echo "LDMS_AGG_WAIT missing daemon list: ${!lswait[@]}"

		echo "LDMS_AGG_WAIT timed out at $tnow waiting for daemon count: ${#lswait[@]}"
		bypass=1
		# not starting wait_all, so others will timeout.
	fi
}

function LDMS_AGG_WAIT_SET_COUNT {
	# wait until daemon given has no more than COUNT sets.
	# LDMS_AGG_WAITSET_COUNT agg-daemon agg_timeout set-count set_timeout
	# timeouts are integer seconds to wait. 0 or less is infinite wait.
	# retry at agg is 0.5 sec
	# checking of the agg daemon is performed by the process instance which launched it,
	# while others wait on the result.
	# could apply $* to ldms_ls as a filter on the count, but have not yet.
	if test "$bypass" = "1"; then
		return 0
	fi
	agg_retry_interval=0.5
	set_retry_interval=0.5
	aggd=$1
	agg_timeout=$2
	set_count=$3
	set_timeout=$4
	shift
	shift
	shift
	shift
	# do the repeated checking of aggd
	# wait on agg to appear
	if test $agg_timeout -le 0; then
		agg_timeout=1000000000
	fi
	agg_tend=$(( $(date +%s) + $agg_timeout))
	if test -n "$PORT"; then
		iport=$PORT
	else
		iport=${ports[$aggd]}
	fi
	ihost=localhost
	while /bin/true; do
		sleep $agg_retry_interval
		if test $(date +%s) -gt $agg_tend; then
			echo timeout connecting to aggregator daemon $aggd
			bypass=1
			return 1
		fi
		if ! test -f "$LDMSD_PIDFILE.$aggd"; then
			continue
		fi
		if ldms_ls -x $XPRT -p $iport -h $ihost -S set_dummy > /dev/null; then
			echo found aggregator $i at $(date +%s.%N)
			break
		fi
	done

	if test $set_timeout -le 0; then
		set_timeout=1000000000
	fi
	set_tend=$(( $(date +%s) + $set_timeout))
	echo waiting drop to $set_count sets
	while /bin/true; do
		sleep $set_retry_interval
		if test $(date +%s) -gt $set_tend; then
			tnow=$(date +%s.%N)
			break
		fi
		ofile=$TESTDIR_FAST/ldms_agg_wait_set_count.out
		if ! test -f "$LDMSD_PIDFILE.$aggd"; then
			break; # agg died?
		fi
		/bin/rm -f $ofile
		if ldms_ls -x $XPRT -p $iport -h $ihost > $ofile; then
			nl=$(grep ^localhost $ofile | wc -l)
			/bin/rm $ofile
			if test $nl -le $set_count; then
				tnow=$(date +%s.%N)
				echo "set count dropped to or below $set_count at $tnow";
				return 0
			fi
		fi
	done
	echo "LDMS_AGG_WAIT_SET_COUNT: timeout at $tnow with still $nl sets remaining:"
	ldms_ls -x $XPRT -p $iport -h $ihost
	# we don't launch wait_all here, so testleader never appears and all others
	# hit the timeout error.
	bypass=1
	return 1
}

# FILECNT_LDMSD num list
function FILECNT_LDMSD {
	if test "$bypass" = "1"; then
		return 0
	fi
	for i in $*; do
		if test -f $LDMSD_PIDFILE.$i; then
			dpid=$(cat $LDMSD_PIDFILE.$i)
			dts=$(date +%s)
			/bin/ls /proc/$dpid/fd -l > $LDMSD_PIDFILE.$i.cnt.$dts
			filecnt=$(wc -l $LDMSD_PIDFILE.$i.cnt.$dts | sed -e 's/ .*//')
			echo "$i: FileCount=$filecnt"
			egrep '(Threads|VmRSS|VmSize)' /proc/$dpid/status |sed -e 's/:[[:space:]]*/=/' -e "s/^/$i: /"
			mv $LDMSD_PIDFILE.$i.cnt.$dts $LDMSD_PIDFILE.$i.cnt.$dts.$filecnt
		else
			echo $i: filecnt cannot find pidfile for $i
		fi
	done
}

# KILL_LDMSD num list
function KILL_LDMSD {
	for i in $*; do
		if test "strict" = "$i"; then
			KILL_LDMSD_STRICT=1
			continue
		fi
		if test -f $LDMSD_PIDFILE.$i; then
			if test -n "$PORT"; then
				iport=$PORT
			else
				iport=${ports[$i]}
			fi
			if test -z "$KILL_NO_TEARDOWN"; then
				echo "ldmsctl -x $XPRT -p $iport -h $HOST -s $LDMSD_RUN/revconf.$i" > ${LOGDIR}/teardown.$i.txt
				ldmsctl -x $XPRT -p $iport -h $HOST -s $LDMSD_RUN/revconf.$i >> ${LOGDIR}/teardown.$i.txt
			fi
			if test -f $LDMSD_PIDFILE.$i; then
				kill -SIGTERM `cat $LDMSD_PIDFILE.$i`
			fi
		else
			if test "$KILL_LDMSD_STRICT" = "1"; then
				bypass=1;
			fi
			echo cannot find pidfile for $i
		fi
	done
}

function rollover_created {
	if test "$bypass" = "1"; then
		return 0
	fi
	x=`ls $1.[0-9]*`
	if test -z "$x"; then
		echo "FAIL: roll-over files $1.* not created."
		bypass=1
		return 1
	fi
	for i in $x; do
		if ! test -r $i; then
			echo FAIL: file $i not readable.
			bypass=1
			return 1
		fi
	done
	return 0
}
function file_created {
	if test "$bypass" = "1"; then
		return 0
	fi
	if ! test -f $1; then
		echo FAIL: file $1 not created.
		bypass=1
		return 1
	fi
	if ! test -r $1; then
		echo FAIL: file $1 not readable.
		bypass=1
		return 1
	fi
	return 0
}
# pause some seconds
function SLEEP() {
	if test "$bypass" = "1"; then
		echo skipping sleep
		return 0
	fi
	echo -n sleep $1 ...
	sleep $1
	echo done
}

# generate a jobinfo file
jobid=1002003004005006000
uid=0
appid=2000000000000006000
function job_vals () {
cat << EOF > $1
JOBID=$jobid
UID=$uid
USER=fakeuser
APPID=$appid
EOF
((jobid++))
((uid+=1000))
((appid+=10))
}

function JOBDATA () {
if test "$#" = "1"; then
	job_vals $1
	return
fi
f=$1
shift
for i in $*; do
	job_vals $f.$i
done
}

portbase=61100
if test ! -x $BUILDDIR/sbin/ldmsd; then
	echo "can't find ldmsd binary. set destdir in $0 before testing?"
	exit 1
fi
if test "$allowroot" = "0"; then
case "x$USER" in
	x)
	echo "must be run in user environment. USER not set"
	exit 1
	;;
	xroot)
	echo "must be run in user environment. root detected."
	echo "killing other folks ldmsd might be a bad idea"
	echo "try 'allowroot=1 $0 $*' to force run."
	exit 1
	;;
esac
fi

# use our pid in dirname to prevent collisions in dir & file naming
export STOREDIR=$TESTDIR/store
export SOCKDIR=$TESTDIR/run/ldmsd
export LOGDIR=$TESTDIR/logs
export LDMSD_PIDFILE=$TESTDIR/run/ldmsd.pid
SECRET=$SOCKDIR/secret
export TSAN_OPTIONS=verbosity=1:log_path=$LOGDIR:strip_path_prefix=$prefix
export ASAN_OPTIONS=verbosity=1:log_path=$LOGDIR:detect_stack_use_after_return=1:detect_leaks=1:strip_path_prefix=$prefix
export LDMSD_RUN=${TESTDIR}/run
mkdir -p $STOREDIR $SOCKDIR $LOGDIR $LDMSD_RUN $TESTDIR_FAST
echo "secretword="`openssl rand -hex 16` > $SECRET
export LDMS_AUTH_FILE=$SECRET
chmod go-rwx $SECRET
echo "logs and data stored under $TESTDIR"

export PATH=$LDMSD_RUN:${BUILDDIR}/sbin:${BUILDDIR}/bin:$PATH

echo "Listing ldmsd's still running:"
pgrep ldmsd
echo "Done."
echo "fast scratch under $TESTDIR_FAST"
echo "logs and data stored under $TESTDIR"

echo removing old output
rm -rf ${STOREDIR}/*

. $input

SLEEP 1
echo removing $TESTDIR_FASTroot
/bin/rm -rf $TESTDIR_FASTroot
echo "logs and data stored under $TESTDIR"
echo done

if test "$KILL_LDMSD_STRICT" = "1"; then
	exit 1
fi;


