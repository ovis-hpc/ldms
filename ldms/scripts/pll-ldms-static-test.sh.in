#!/bin/bash
#
# This tests ldmsd run with static config files (as would normally
# happen as a system service) and shut down with a signal.
# This version is slurm aware and only does things when the daemon
# number matches (1+$SLURM_PROCID).
# This version expects the caller to prepopulate a file named in
# env(TEST_HOSTFILE) with initialization of the hostnames
# for the daemon numbers.
# All actions are unlooped from the implementation viewpoint, because
# slurm executes this NTASKS times.
#
bypass=0
if test -z "$allowroot"; then
	allowroot=0
fi
export prefix=@prefix@
export exec_prefix=@exec_prefix@
export libdir=@libdir@
export BUILDDIR=@prefix@
if ! test -f $libdir/ovis-ldms-configvars.sh; then
	echo "$libdir/ovis-ldms-configvars.sh not found"
	exit 1
fi
. $libdir/ovis-ldms-configvars.sh
export pkglibdir=${ovis_ldms_pkglibdir}
export PACKAGE_TARNAME=ovis-ldms
export docdir=${ovis_ldms_datarootdir}/doc/${PACKAGE_TARNAME}
export exdir=$docdir
# default log is debug
export LOG_LEVEL=DEBUG

if test -z "$ZAP_LIBPATH"; then
	ZAP_LIBPATH=$ovis_ldms_plugins
fi
export ZAP_LIBPATH
if test -z "$LDMSD_PLUGIN_LIBPATH"; then
	LDMSD_PLUGIN_LIBPATH=$ovis_ldms_plugins
fi
export LDMSD_PLUGIN_LIBPATH
export LD_LIBRARY_PATH=${ovis_ldms_plugins_rpath}:${BUILDDIR}/lib:${exec_prefix}/lib:$ovis_ldms_plugins:$LD_LIBRARY_PATH
export PYTHONPATH=${ovis_ldms_pythondir}:$PYTHONPATH

function clusage {
cat << EOF
$0: usage:
$0 -l
$0 -h
$0 -b <input_file>
$0 <input_file> [test_dir]
	-h produces help message
	-l produces list of canned test names
See man pll-ldms-static-test(8) for details.
EOF
}
input=$1
export input
if test -z "$1"; then
	echo "FAIL: no input file to $0"
	exit 1
fi
if test "$1" = "-h"; then
	clusage
	exit 0
fi
if test "$1" = "-l"; then
	echo "Canned tests are:"
	echo "$exdir/examples/slurm-test/"
	(cd $exdir/examples/slurm-test; cat .canned)
	exit 0
fi
if test "$1" = "-b"; then
	shift
	input=""
	# check for unqualified name
	if test $(basename $1) = $1 -a ! -f $1; then
		if test -f $exdir/examples/slurm-test/sbatch.$1; then
			input=$exdir/examples/slurm-test/sbatch.$1
		fi
	else
		dname=$(dirname $1)
		bname=$(basename $1)
		sbname=$dname/sbatch.$bname
		if test -f $sbname; then
			input=$sbname
		fi
	fi
	# >&2 echo "Canned test batch script for $1 should be:"
	if test -n $input; then
		echo "$input"
		exit 0
	else
		echo "sbatch file not found for $1"
		exit 1
	fi
fi
if test $(basename $1) = $1; then
	# is an unqualified name
	if ! test -f $1; then
		# and not in local directory
		if test -f $exdir/examples/slurm-test/$1; then
			# and can use the installed input file
			input=$exdir/examples/slurm-test/$1
		fi
	fi
else
	echo "pll-ldms-static-test.sh requires an installed case file."
	echo "Relative input is not supported, although it is for ldms-static-test.sh"
	exit 1
fi
if ! test -f $input -a -r $input; then
	echo FAIL: cannot read test input $1
	exit 1
fi
export testname=`basename $1`
if ! test "x$SLURM_PROCID" = "x"; then
	export myproc=$(($SLURM_PROCID + 1))
else
	echo "$0: must be run under slurm"
	exit 1
fi
# get_prolog_name insertfile basefile
# find prolog file in . or adjacent to basefile
# or in standard directory
function get_prolog_name () {
	local rfile
	if test "$#" = "0"; then
		return ""
	fi
	pfile=$1
	basefile=$2
	rfile=$pfile
	# check unqualified path names not existing in pwd
	if test $(basename $pfile) = $pfile -a ! -f $pfile; then
		# in standard place?
		if test -f $exdir/examples/slurm-test/$pfile; then
			rfile=$exdir/examples/slurm-test/$pfile
		fi
		if test -n "$2"; then
			basedir=$(dirname $basefile)
			if test -f $basedir/$pfile; then
				rfile=$basedir/$pfile
			fi
		fi
	fi
	if ! test -f $rfile -a -r $rfile; then
		echo "FAIL: $myproc: cannot find test prolog $pfile in . $exdir/examples/slurm-test or next to $basefile."
		rfile=""
		exit 1
	fi
	echo $rfile
}

TESTDIR=$2

if test -z "$2"; then
	if test -n "LDMSNET"; then
		TESTSUFF=".$LDMSNET"
	fi
	TESTDIR=`pwd`/ldmstest/$testname/$SLURM_JOBID.$SLURM_CLUSTER_NAME.nodes-$SLURM_JOB_NUM_NODES.tasks-$SLURM_NTASKS$TESTSUFF
	TESTDIR_FAST=/dev/shm/$USER/ldmstest/$testname/$SLURM_JOBID.$SLURM_CLUSTER_NAME.nodes-$SLURM_JOB_NUM_NODES.tasks-$SLURM_NTASKS$TESTSUFF/$$
else
	TESTDIR_FAST=/dev/shm/$USER/$TESTDIR/$$
fi
export TESTDIR_FAST
export TESTDIR
# TESTDIR must be on a global file system
# TESTDIR_FAST must be on a node-local memory or nvme

if test -z "$HOST"; then
	# used for ldms_ls
	export HOST=$(hostname)
fi
if test -z "$XPRT"; then
	# used for ldms_ls and ldmsd
	export XPRT=sock
fi
declare -a ports

# get the slurm job time remaining in seconds,
# of if not set or unlimited, returns 600 (10 min)
# if error in getting/parsing time, returns 10.
# d-h:m:s
# h:m:s
# m:s
shopt -s extglob
function SEC_LEFT {
	jt_left=$(squeue -h -j $SLURM_JOBID -o "%L")
	jt_sec=600
	case $jt_left in
	NOTSET)
		;;
	UNLIMITED)
		;;
	+([0-9])-+([0-9]):+([0-9]):+([0-9]))
		jt_sec=$(echo "$jt_left" | awk -F':' '{print $1 *86400 + $2 * 60 * 60 + $3 * 60 + $4}')
		;;
	+([0-9]):+([0-9]):+([0-9]))
		jt_sec=$(echo "$jt_left" | awk -F':' '{print $1 * 60 * 60 + $2 * 60 + $3}')
		;;
	+([0-9]):+([0-9]))
		jt_sec=$(echo "$jt_left" | awk -F':' '{print $1 * 60 + $2}')
		;;
	*)
		jt_sec=10
		;;
	esac
	echo $jt_sec
}

# turn on valgrind usage in ldmsd and ldms_ls.
# VG and VGARGS may be specified to override the default
# valgrind in path and the default valgrind options.
# by default -v --log-file=something are provided.
#
function vgon {
  usevg=1
}

# turn off valgrind usage
function vgoff {
  usevg=0
}

log_level_list="DEBUG|ERROR|INFO|ALL|QUIET|WARNING|CRITICAL"
function SET_LOG_LEVEL {

	lvl=$1
	case $lvl in
	DEBUG|ERROR|INFO|ALL|QUIET|WARNING|CRITICAL)
		;;
	*)
		echo unknown log level $1
		echo expected one of $log_level_list
		bypass=1
		return 1
		;;
	esac
	export LOG_LEVEL=$lvl
	echo "LOG_LEVEL=$LOG_LEVEL"
	return 0
}

# Define the port variables for the listed daemons.
# The daemons list given is stored in variable
# ALL_DAEMONS
# The ports are defined sequentially.
# The hosts come from slurm.
# More DAEMONS than tasks is an error.
did_daemons=0
function DAEMONS {
	if test $did_daemons = "1"; then
		return
	fi
	ALL_DAEMONS="$*"
	declare -a ALL_DAEMONS_ARRAY
	for i in $*; do
		ALL_DAEMONS_ARRAY[$i]=$i
		ports[$i]=$(($portbase + $i))
		eval export port$i=${ports[$i]}
		if test $i -ne $myproc; then
			continue
		fi
		if test $i -gt $SLURM_NTASKS; then
			echo "FAIL: DAEMON $i too big for SLURM_NTASKS=$SLURM_NTASKS"
			bypass=1
			return
		fi

		/bin/rm -f ${LOGDIR}/log.$i.txt ${LOGDIR}/vg.$i ${LOGDIR}/teardown.$i.txt ${LOGDIR}/std.$i.io
		binname=ldmsd.${ports[$i]}
		pkill -9 $binname
		/bin/rm -f $LDMSD_RUN/$binname
		if test -f $pkglibdir/ldmsd; then
			ln -s $pkglibdir/ldmsd $LDMSD_RUN/$binname
		else
			ln -s ${BUILDDIR}/sbin/ldmsd $LDMSD_RUN/$binname
		fi
	done
	did_daemons=1
}

# LDMSD number-list launch a daemon for each number
# expecting to find $input.$i configuration files.
# ${i} will be exported to the environment of ldmsd.
function LDMSD {
	if test "$bypass" = "1"; then
		echo $myproc: skipping sleep
		return 0
	fi
	prologs=""
	loopprologs=""
	bug=0
	local OPTIND
	local cloneinput=0
	local first=""
	startwait=2000000
	while getopts ":p:P:s:c" opt; do
		case $opt in
		p)
			f="$OPTARG"
			prologs="$prologs $OPTARG"
			if test "${f:0:1}" = "-"; then
				echo "LDMSD: $myproc: -p expected filename"
				file=""
				bug=2
				((OPTIND--))
			fi
			;;
		P)
			f="$OPTARG"
			# arg is filename,$PLIST
			# fixme: order should matter, which means we
			# would need to expand args here and include
			# tmp result in prologs list
			loopprologs="$loopprologs $OPTARG"
			if test "${f:0:1}" = "-"; then
				echo "LDMSD: $myproc: -P expected filename,PLIST"
				file=""
				bug=2
				((OPTIND--))
			fi
			;;
		c)
			cloneinput=1;
			# recycle input to list of similar daemons
			# after all prolog processing is done.
			# in this (pll) case, clones must assemble anyway.
			;;
		s)
			startwait="$OPTARG";
			;;
		\?)
			echo "Invalid option: $myproc: -$OPTARG" >&2
			bug=1
			;;
		esac
	done
	shift "$((OPTIND - 1))"
	if test "$bug" != "0"; then
		return
	fi

	DAEMONS $*
	if test "x$cloneinput" = "x1"; then
		first=$1
	fi
	clonefile=""
	for i in $*; do
		export i
		if test $i -ne $myproc; then
			continue
		fi
		if test "$usevg" = "1"; then
			if test -z "$VG"; then
				XVG=valgrind
			else
				XVG=$VG
			fi
			if test -n "LDMSNET"; then
				XVGSUFF=".$LDMSNET"
			fi
			if test -z "$VGARGS"; then
				XVGARGS="-v --trace-children=yes --log-file=${LOGDIR}/vg.$i$VGTAG.%p$XVGSUFF"
			else
				XVGARGS="-v --trace-children=yes --log-file=${LOGDIR}/vg.$i$VGTAG.%p$XVGSUFF $VGARGS"
			fi
			wrap="$XVG $XVGARGS"
		else
			wrap=""
		fi
		echo starting daemon $i
		# set -x
		if test -n "$HOST"; then
			XPRTHOST=":${hosts[$i]}"
		fi
		if test -n "$first"; then
			insuff=$first
		else
			insuff=$i
		fi
		if test -f $input.$insuff -a -r $input.$insuff ; then
			echo "# generated from $input" > $LDMSD_RUN/conf.$i
			for lf in $loopprologs; do
				loopfile=0
				alist=$(echo $lf | tr , " ")
				for j in $alist; do
					if test $loopfile = "0"; then
						loopfile=$j
						pfn=`get_prolog_name $loopfile $input`
						echo "# looped prolog from $pfn" >> $LDMSD_RUN/conf.$i
					else
						cat $pfn | sed -e "s/\${j}/$j/g" >> $LDMSD_RUN/conf.$i
					fi
				done
			done
			for pf in $prologs; do
				pfn=`get_prolog_name $pf $input`
				echo "# prolog from $pfn" >> $LDMSD_RUN/conf.$i
				cat $pfn >> $LDMSD_RUN/conf.$i
			done
			echo "# generated from $input.$insuff" >> $LDMSD_RUN/conf.$i
			cat $input.$insuff >> $LDMSD_RUN/conf.$i
			clonefile=$LDMSD_RUN/conf.$i
			ldms-reverse-conf.sh $LDMSD_RUN/conf.$i > $LDMSD_RUN/revconf.$i
			echo $myproc: starting daemon $i
			env > $LDMSD_RUN/env.$i
			echo $wrap ldmsd.${ports[$i]} \
				-x ${XPRT}:${ports[$i]}${XPRTHOST} \
				-c $LDMSD_RUN/conf.$i \
				-l ${LOGDIR}/log.$i.txt \
				-v $LOG_LEVEL $LDMSD_EXTRA \
				-r $LDMSD_PIDFILE.$i \
				"2>&1 > ${LOGDIR}/std.$i.io &" > $LDMSD_RUN/start.$i
			$wrap ldmsd.${ports[$i]} \
				-x ${XPRT}:${ports[$i]}${XPRTHOST} \
				-c $LDMSD_RUN/conf.$i \
				-l ${LOGDIR}/log.$i.txt \
				-v $LOG_LEVEL $LDMSD_EXTRA \
				-r $LDMSD_PIDFILE.$i \
				2>&1 > ${LOGDIR}/std.$i.io &
		else
			if test -f $clonefile -a $cloneinput = "1"; then
				cp $clonefile $LDMSD_RUN/conf.$i
				ldms-reverse-conf.sh $LDMSD_RUN/conf.$i > $LDMSD_RUN/revconf.$i
				echo $myproc: starting daemon $i
				env > $LDMSD_RUN/env.$i
				echo $wrap ldmsd.${ports[$i]} \
					-x ${XPRT}:${ports[$i]}${XPRTHOST} \
					-c $LDMSD_RUN/conf.$i \
					-l ${LOGDIR}/log.$i.txt \
					-v $LOG_LEVEL $LDMSD_EXTRA \
					-r $LDMSD_PIDFILE.$i \
					"2>&1 > ${LOGDIR}/std.$i.io &" \
					> $LDMSD_RUN/start.$i
				$wrap ldmsd.${ports[$i]} \
					-x ${XPRT}:${ports[$i]}${XPRTHOST} \
					-c $LDMSD_RUN/conf.$i \
					-l ${LOGDIR}/log.$i.txt \
					-v $LOG_LEVEL $LDMSD_EXTRA \
					-r $LDMSD_PIDFILE.$i \
					2>&1 > ${LOGDIR}/std.$i.io &
			else
				echo $myproc: IDLE DAEMON $i
				env > $LDMSD_RUN/env.$i
				echo "#" > $LDMSD_RUN/revconf.$i
				echo ldmsd.${ports[$i]} -x ${XPRT}:${ports[$i]}${XPRTHOST} \
					-l ${LOGDIR}/log.$i.txt \
					-v $LOG_LEVEL \
					-r $LDMSD_PIDFILE.$i \
					"2>&1 > ${LOGDIR}/std.$i.io &" \
					> $LDMSD_RUN/start.$i
				ldmsd.${ports[$i]} -x ${XPRT}:${ports[$i]}${XPRTHOST} \
					-l ${LOGDIR}/log.$i.txt \
					-v $LOG_LEVEL \
					-r $LDMSD_PIDFILE.$i \
					2>&1 > ${LOGDIR}/std.$i.io &
			fi
		fi
		# assume gnu sleep and bc exist, because usleep deprecated
		sleep $(echo "0.000001 * $startwait" |bc)

#	if ! test -f $LDMSD_PIDFILE.$i; then
#		echo FAIL: $myproc: failed to start $i $XPRTHOST. check ${LOGDIR}/$i.txt
#		#bypass=1
#		break;
#	fi
	done

}

# MESSAGE print arguments to output
function MESSAGE  {
	if test "$bypass" = "1"; then
		return 0
	fi
	echo ${myproc}: $*
}

#
function LDMS_LS {
	if test "$bypass" = "1"; then
		return 0
	fi
	nodes=$1
	shift
	for i in $nodes; do
		if test $i -ne $myproc; then
			continue
		fi
		if test "$usevg" = "1"; then
			if test -z "$VG"; then
				XVG=valgrind
			else
				XVG=$VG
			fi
			if test -n "LDMSNET"; then
				XVGSUFF=".$LDMSNET"
			fi
			if test -z "$VGARGS"; then
				VGARGS="-v --log-file=${LOGDIR}/vgls.$i$VGTAG.%p"
			else
				XVGARGS="-v --log-file=${LOGDIR}/vgls.$i$VGTAG.%p$XVGSUFF $VGARGS"
			fi
			wrap="$XVG $XVGARGS"
		else
			wrap=""
		fi
		if ! test -f "$LDMSD_PIDFILE.$i"; then
			echo FAIL: $myproc: ls of missing daemon $i skipped. check ${LOGDIR}/$i.txt
			bypass=1
			break;
		fi
		if test -n "$PORT"; then
			iport=$PORT
		else
			iport=${ports[$i]}
		fi
		ihost=${hosts[$i]}
		echo "$myproc: $wrap ldms_ls  -h $ihost -x $XPRT -p $iport $*"
		$wrap ldms_ls  -h $ihost -x $XPRT -p $iport $*
	done
}

function SOCKWAIT {
	# wait until nothing local is holding onto myport (return 0)
	# or until timeout seconds go by (return 1).
	if test "$bypass" = "1"; then
		return 0
	fi
        myport=$1
        timeout=$2
        for i in $(seq $timeout); do
                y=$(ss -Hon state all "( sport = :$myport )" |wc -l)
                if test $y = "0"; then
                        echo done
                        return 0
                fi
                echo -n .
                sleep 1
        done
        return 1 ; # something still stuck
}

function WAIT_ALL {
	# WAIT_ALL timeout daemon-number*
	# the list of daemon-number elements must be unique.
	# normally $ALL_DAEMONS is needed as the argument list
	# the first host will be the leader.
	if test "$bypass" = "1"; then
		return 0
	fi
	timeout=$1
	shift
	count=$#
	if test $count -le 1; then
		return 0
	fi
	echo "Waiting $timeout for ($count) $*"

	lead=$1
	serverhost=${hosts[$lead]}
	shift
	for i in $*; do
		if test $i -ne $myproc; then
			continue
		fi
		ldms_barrier \
			--client-tag $i \
			--max-clients $count \
			--timeout $timeout \
			--retry-interval 0.1 \
			--server $serverhost \
			--interface $HOST_IFACE \
			--port $portbase \
			$BARRIER_VERBOSE \
			$*
		stat=$?
		if ! test $stat = "0"; then
			MESSAGE barrier fail $stat
			bypass=1
		fi
		return $stat
	done
	if test $lead = $myproc; then
		ldms_barrier \
			-l \
			--client-tag $lead \
			--max-clients $count \
			--timeout $timeout \
			--retry-interval 0.1 \
			--server $serverhost \
			--interface $HOST_IFACE \
			--port $portbase \
			$BARRIER_VERBOSE \
			$*
		stat=$?
		if ! test $stat = "0"; then
			MESSAGE barrier fail $stat
			bypass=1
		fi
		return $stat
	fi
	return 0
}

function LDMS_LS_WAIT {
	# wait until all daemons given have been seen to have the schema named present
	# by first rank in the job.
	# LDMS_LS_WAIT schema timeout daemon_number*
	# timeout is integer seconds to wait for all to appear. 0 or less is infinite wait.
	# There's a WAIT_ALL call at the end of this.
	if test "$bypass" = "1"; then
		return 0
	fi
	schema=$1
	timeout=$2
	shift
	shift
	# do the repeated checking from just aggd driver
	testleader=1
	if test "x$myproc" = "x$testleader"; then
		declare -a lswait
		# build target daemon list
		for i in $*; do
			lswait[$i]=1
		done
		if test $timeout -le 0; then
			timeout=1000000000
		fi
		tend=$(( $(date +%s) + $timeout))
		while test ${#lswait[@]} -gt 0; do
			sleep 0.1
			if test $(date +%s) -gt $tend; then
				break
			fi
			echo waiting ${#lswait[@]} daemons
			for i in ${!lswait[@]}; do
				if test $(date +%s) -gt $tend; then
					break
				fi
				if test -n "$PORT"; then
					iport=$PORT
				else
					iport=${ports[$i]}
				fi
				if ! test -f "$LDMSD_PIDFILE.$i"; then
					continue
				fi
				ihost=${hosts[$i]}
				if ldms_ls -x $XPRT -p $iport -h $ihost -S $schema -v |grep Tot > /dev/null; then
					echo found daemon $i at $(date +%s.%N)
					unset -v lswait[$i]
				fi
			done
		done
		if test ${#lswait[@]} -gt 0; then
			echo "LDMS_LS_WAIT missing daemon list: ${!lswait[@]}"
			echo "LDMS_LS_WAIT timed out waiting for daemon count: ${#lswait[@]}"
			bypass=1
			# all other ranks will timeout waiting on leader
		else
			WAIT_ALL $timeout $ALL_DAEMONS
			# start the wait leader
		fi
	else
		WAIT_ALL $timeout $ALL_DAEMONS
		# start the wait herd
	fi
}

function LDMS_LS_WAIT_STORM {
	# wait until all daemons given have been seen to have the schema named present
	# by every daemon in the job. (N^2 connecting)
	# LDMS_LS_WAIT_STORM schema timeout daemon_number*
	# timeout is integer seconds to wait for all to appear. 0 or less is infinite wait.
	#
	# every caller is waiting for the same event to happen, but some might not
	# start looking for it until others have finished.
	# so there's a WAIT_ALL call at the end of this.
	if test "$bypass" = "1"; then
		return 0
	fi
	schema=$1
	timeout=$2
	shift
	shift
	declare -a lswait
	# build target daemon list
	for i in $*; do
		lswait[$i]=1
	done
	if test $timeout -le 0; then
		timeout=1000000000
	fi
	tend=$(( $(date +%s) + $timeout))
	while test ${#lswait[@]} -gt 0; do
		sleep 0.1
		if test $(date +%s) -gt $tend; then
			break
		fi
		echo waiting ${#lswait[@]} daemons
		for i in ${!lswait[@]}; do
			if test $(date +%s) -gt $tend; then
				break
			fi
			if test -n "$PORT"; then
				iport=$PORT
			else
				iport=${ports[$i]}
			fi
			if ! test -f "$LDMSD_PIDFILE.$i"; then
				continue
			fi
			ihost=${hosts[$i]}
			if ldms_ls -x $XPRT -p $iport -h $ihost -S $schema -v |grep Tot > /dev/null; then
				echo found daemon $i at $(date +%s.%N)
				unset -v lswait[$i]
			fi
		done
	done
	if test ${#lswait[@]} -gt 0; then
		echo "LDMS_LS_WAIT_STORM missing daemon list: ${!lswait[@]}"
		echo "LDMS_LS_WAIT_STORM timed out waiting for daemon count: ${#lswait[@]}"
		bypass=1
	fi
	# everyone tried independently. barrier after all reach the same conclusion.
	WAIT_ALL $timeout $ALL_DAEMONS
}

function LDMS_AGG_WAIT {
	# wait until all daemons given have been seen to have the schema named present
	# on the agg daemon given. Set names must be localhost${i}/$schema
	# LDMS_AGG_WAIT agg-daemon agg-timeout schema set-timeout daemon_number*
	# timeouts are integer seconds to wait. 0 or less is infinite wait.
	# checking of the agg daemon is performed by the process rank which launched it,
	# while others wait on the result.
	# aggregator connect retry is 0.5 sec
        # set lookup retries are 0.2 sec
	if test "$bypass" = "1"; then
		return 0
	fi
	agg_retry_interval=0.5
	set_retry_interval=0.2
	aggd=$1
	agg_timeout=$2
	schema=$3
	set_timeout=$4
	shift
	shift
	shift
	shift
	# wait on agg to appear
	if test $agg_timeout -le 0; then
		agg_timeout=1000000000
	fi
	set -x
	# do the repeated checking from just aggd driver
	testleader=$aggd
	if test "x$myproc" = "x$testleader"; then
		agg_tend=$(( $(date +%s) + $agg_timeout))
		while /bin/true; do
			sleep $agg_retry_interval
			if test $(date +%s) -gt $agg_tend; then
				echo timeout connecting to aggregator daemon $aggd
				bypass=1
				return 1 ; # all others will timeout
			fi
			if test -n "$PORT"; then
				iport=$PORT
			else
				iport=${ports[$aggd]}
			fi
			if ! test -f "$LDMSD_PIDFILE.$aggd"; then
				continue
			fi
			ihost=${hosts[$aggd]}
			if ldms_ls -x $XPRT -p $iport -h $ihost -S set_dummy > /dev/null; then
				echo found aggregator $i at $(date +%s.%N)
				break
			fi
		done

		declare -a lswait
		# build target set list
		for i in $*; do
			lswait[$i]=1
		done
		if test $set_timeout -le 0; then
			set_timeout=1000000000
		fi
		set_tend=$(( $(date +%s) + $set_timeout))
		if test -n "$PORT"; then
			iport=$PORT
		else
			iport=${ports[$aggd]}
		fi
		ihost=${hosts[$aggd]}
		while test ${#lswait[@]} -gt 0; do
			sleep $set_retry_interval
			if test $(date +%s) -gt $set_tend; then
				tnow=$(date +%s.%N)
				break
			fi
			echo waiting ${#lswait[@]} sets to appear
			ofile=$TESTDIR_FAST/ldms_agg_wait.out
			while test ${#lswait[@]} -gt 0; do
				timecheck=$(date +%s)
				if test $timecheck -gt $set_tend; then
					echo LDMS_AGG_WAIT sets check timed out at $timecheck
					break
				fi
				if ! test -f "$LDMSD_PIDFILE.$aggd"; then
					echo LDMS_AGG_WAIT: pid of agg disappeared at $timecheck
					break; # agg died?
				fi
				if ldms_ls -x $XPRT -p $iport -h $ihost -S $schema > $ofile; then
					tnow=$(date +%s.%N)
					nl=$(sed -e 's/^ldms.*//' -e 's%^localhost%%' -e  "s%/${schema}.*%%" $ofile)
					/bin/rm -f $ofile
					for i in $nl; do
						if test x${lswait[${i}]} = x1; then
							echo "found set from daemon $i at $tnow";
							unset -v lswait[$i];
						fi
					done
				fi
			done
		done
		if test ${#lswait[@]} -gt 0; then
			echo "LDMS_AGG_WAIT missing daemon list: ${!lswait[@]}"

			echo "LDMS_AGG_WAIT timed out at $tnow waiting for daemon count: ${#lswait[@]}"
			bypass=1
			# not starting wait_all, so others will timeout.
		else
			WAIT_ALL $(( $set_timeout + $agg_timeout)) $ALL_DAEMONS
		fi
	else
		echo "LDMS_AGG_WAIT: rank $testleader is performing checks."
		WAIT_ALL $(( $set_timeout + $agg_timeout)) $ALL_DAEMONS
	fi
}

function LDMS_AGG_WAIT_SET_COUNT {
	# wait until daemon given has no more than COUNT sets.
	# LDMS_AGG_WAITSET_COUNT agg-daemon agg_timeout set-count set_timeout
	# timeouts are integer seconds to wait. 0 or less is infinite wait.
	# retry at agg is 0.5 sec
	# checking of the agg daemon is performed by the process instance which launched it,
	# while others wait on the result.
	# could apply $* to ldms_ls as a filter on the count, but have not yet.
	if test "$bypass" = "1"; then
		return 0
	fi
	agg_retry_interval=0.5
	set_retry_interval=0.5
	aggd=$1
	agg_timeout=$2
	set_count=$3
	set_timeout=$4
	shift
	shift
	shift
	shift
	# do the repeated checking from just aggd driver
	testleader=1
	if test "x$myproc" = "x$testleader"; then
		# wait on agg to appear
		if test $agg_timeout -le 0; then
			agg_timeout=1000000000
		fi
		agg_tend=$(( $(date +%s) + $agg_timeout))
		if test -n "$PORT"; then
			iport=$PORT
		else
			iport=${ports[$aggd]}
		fi
		ihost=${hosts[$aggd]}
		while /bin/true; do
			sleep $agg_retry_interval
			if test $(date +%s) -gt $agg_tend; then
				echo timeout connecting to aggregator daemon $aggd
				bypass=1
				return 1
			fi
			if ! test -f "$LDMSD_PIDFILE.$aggd"; then
				continue
			fi
			if ldms_ls -x $XPRT -p $iport -h $ihost -S set_dummy > /dev/null; then
				echo found aggregator $i at $(date +%s.%N)
				break
			fi
		done

		if test $set_timeout -le 0; then
			set_timeout=1000000000
		fi
		set_tend=$(( $(date +%s) + $set_timeout))
		echo waiting drop to $set_count sets
		while /bin/true; do
			sleep $set_retry_interval
			if test $(date +%s) -gt $set_tend; then
				tnow=$(date +%s.%N)
				break
			fi
			ofile=$TESTDIR_FAST/ldms_agg_wait_set_count.out
			if ! test -f "$LDMSD_PIDFILE.$aggd"; then
				break; # agg died?
			fi
			/bin/rm -f $ofile
			if ldms_ls -x $XPRT -p $iport -h $ihost > $ofile; then
				nl=$(grep ^localhost $ofile | wc -l)
				/bin/rm $ofile
				if test $nl -le $set_count; then
					tnow=$(date +%s.%N)
					echo "set count dropped to or below $set_count at $tnow";
					WAIT_ALL $set_timeout $ALL_DAEMONS
					return 0
				fi
			fi
		done
		echo "LDMS_AGG_WAIT_SET_COUNT: timeout at $tnow with still $nl sets remaining:"
		ldms_ls -x $XPRT -p $iport -h $ihost
		# we don't launch wait_all here, so testleader never appears and all others
		# hit the timeout error.
		bypass=1
		return 1
	else
		echo "LDMS_AGG_WAIT_SET_COUNT: rank $testleader is performing checks."
		WAIT_ALL $(( $set_timeout + $agg_timeout)) $ALL_DAEMONS
	fi
}

function LDMS_CPU_GRIND {
	# start or stop grinders from local lead daemon
	# LDMS_CPU_GRIND stop
	# LDMS_CPU_GRIND [-k K] [workargs]
	if test "$bypass" = "1"; then
		return 0
	fi
	if test $1 = "stop"; then
		if test -z $CPU_GRIND_DIR; then
			return 0
		fi
		pflist=$(ls $CPU_GRIND_DIR/ldms_cpu_grind.pids.$myproc.*  2> /dev/null)
		for i in dummy $pflist; do
			if test $i = "dummy"; then
				continue
			fi
			tpid=$(cat $i)
			if test -d /proc/$tpid/fd; then
				disown $tpid
				kill -9 $tpid
			fi
			/bin/rm $i
		done
		return 0
	fi
	if test "${least_sampler[$myproc]}" = "1"; then
		CPU_GRIND_DIR=$TESTDIR/run/grind
		gpid=$CPU_GRIND_DIR/ldms_cpu_grind.pids.$myproc
		gargs="-r -1 -p $gpid"
		ihost=${hosts[$myproc]}
		MESSAGE " <$ihost> ldms_cpu_grind ${gargs}.\$i $*"
		if test "x$1" = "x-k" -a -n $2; then
			pcores=$2
			shift
		else
			# get physical core count
			nsock=$(lscpu |grep ^Sock |sed -e 's/.*://' -e 's/ //g')
			ncore=$(lscpu |grep ^Core |sed -e 's/.*://' -e 's/ //g')
			pcores=$(($nsock * $ncore))
		fi
		mkdir -p $CPU_GRIND_DIR
		touch $CPU_GRIND_DIR/lead.$myproc.tasks_$pcores
		for i in $(seq $pcores); do
			ldms_cpu_grind ${gargs}.$i $* &
		done
	fi
}

# FILECNT_LDMSD num list
function FILECNT_LDMSD {
	for i in $*; do
		if test $i -ne $myproc; then
			continue
		fi
		if test -f $LDMSD_PIDFILE.$i; then
			dpid=$(cat $LDMSD_PIDFILE.$i)
			dts=$(date +%s)
			/bin/ls /proc/$dpid/fd -l > $LDMSD_PIDFILE.$i.cnt.$dts
			filecnt=$(wc -l $LDMSD_PIDFILE.$i.cnt.$dts | sed -e 's/ .*//')
			echo "$myproc: filecnt=$filecnt"
			mv $LDMSD_PIDFILE.$i.cnt.$dts $LDMSD_PIDFILE.$i.cnt.$dts.$filecnt
		else
			echo $myproc: filecnt cannot find pidfile for $i
		fi
	done
}

# KILL_LDMSD num list
function KILL_LDMSD {
	for i in $*; do
		if test $i -ne $myproc; then
			continue
		fi
		if test "strict" = "$i"; then
			KILL_LDMSD_STRICT=1
			continue
		fi
		if test -f $LDMSD_PIDFILE.$i; then
			if test -n "$PORT"; then
				iport=$PORT
			else
				iport=${ports[$i]}
			fi
			if test -z "$KILL_NO_TEARDOWN"; then
				echo "ldmsctl -x $XPRT -p $iport -h $HOST -s $LDMSD_RUN/revconf.$i" > ${LOGDIR}/teardown.$i.txt
				ldmsctl -x $XPRT -p $iport -h $HOST -s $LDMSD_RUN/revconf.$i >> ${LOGDIR}/teardown.$i.txt
			fi
			if test -f $LDMSD_PIDFILE.$i; then
				kill -SIGTERM `cat $LDMSD_PIDFILE.$i`
			fi
		else
			if test "$KILL_LDMSD_STRICT" = "1"; then
				bypass=1;
			fi
			echo $myproc: cannot find pidfile for $i
		fi
	done
}

function rollover_created {
	if test "$bypass" = "1"; then
		return 0
	fi
	local file=$1
	shift
	local x
	local i
	local k
	for i in $*; do
		if test $i -ne $myproc; then
			continue
		fi
		x=`ls ${file}.[0-9]*`
		if test -z "$x"; then
			echo "FAIL: $myproc: roll-over files $file.* not created."
			bypass=1
			return 1
		fi
		for k in $x; do
			if ! test -r $k; then
				echo FAIL: $myproc: file $k not readable.
				bypass=1
				return 1
			fi
		done
		return 0
	done
}

function file_created {
	if test "$bypass" = "1"; then
		return 0
	fi
	local file=$1
	shift
	for i in $*; do
		if test $i -ne $myproc; then
			continue
		fi
		if ! test -f $file; then
			echo FAIL: $myproc: file $file not created.
			bypass=1
			return 1
		fi
		if ! test -r $file; then
			echo FAIL: $myproc: file $file not readable.
			bypass=1
			return 1
		fi
		return 0
	done
}
# pause some seconds
function SLEEP() {
	if test "$bypass" = "1"; then
		echo skipping sleep
		return 0
	fi
	echo -n $myproc: sleep $1 ...
	sleep $1
	echo $myproc: done
}

# generate a jobinfo file
jobid=1002003004005006000
uid=0
appid=2000000000000006000
function job_vals () {
cat << EOF > $1
JOBID=$jobid
UID=$uid
USER=fakeuser
APPID=$appid
EOF
((jobid++))
((uid+=1000))
((appid+=10))
}

function JOBDATA () {
# this fires on all nodes
# last one wins, but file system results should be identical
# even if the output fs is shared.
if test "$#" = "1"; then
	job_vals $1
	return
fi
f=$1
shift
for i in $*; do
	job_vals $f.$i
done
}

portbase=10000
if test ! -x $BUILDDIR/sbin/ldmsd; then
	echo "can't find ldmsd binary. set destdir in $0 before testing?"
	exit 1
fi
if test "$allowroot" = "0"; then
case "x$USER" in
	x)
	echo "must be run in user environment. USER not set"
	exit 1
	;;
	xroot)
	echo "must be run in user environment. root detected."
	echo "killing other folks ldmsd might be a bad idea"
	echo "try 'allowroot=1 $0 $*' to force run."
	exit 1
	;;
esac
fi

# use our pid in dirname to prevent collisions in dir & file naming
export STOREDIR=$TESTDIR/store
export SOCKDIR=$TESTDIR/run/ldmsd
export LOGDIR=$TESTDIR/logs
export LDMSD_PIDFILE=$TESTDIR/run/ldmsd.pid
SECRET=$SOCKDIR/secret.$SLURM_JOBID
export TSAN_OPTIONS=verbosity=1:log_path=$LOGDIR:strip_path_prefix=$prefix
export ASAN_OPTIONS=verbosity=1:log_path=$LOGDIR:detect_stack_use_after_return=1:detect_leaks=1:strip_path_prefix=$prefix
export LDMSD_RUN=${TESTDIR}/run
mkdir -p $STOREDIR $SOCKDIR $LOGDIR $LDMSD_RUN
/bin/rm -rf $TESTDIR_FAST
mkdir -p $TESTDIR_FAST
if ! test -d $TESTDIR_FAST; then
	echo unable to create $TESTDIR_FAST
	exit 1
fi
if test $myproc -eq 1; then
	echo "secretword="`openssl rand -hex 16` > $SECRET
	chmod go-rwx $SECRET
	echo $myproc: removing old output
	rm -rf ${STOREDIR}/*
	echo "$myproc: fast tmpfiles under $TESTDIR_FAST"
	echo "$myproc: logs and data stored under $TESTDIR"
else
	while [ ! -f $SECRET ]; do sleep 0.001; done
	# if your system has no gnu sleep, replace 0.001 with 1
fi
export LDMS_AUTH_FILE=$SECRET
chmod go-rwx $SECRET
export PATH=$LDMSD_RUN:${BUILDDIR}/sbin:${BUILDDIR}/bin:$PATH

if test -n "$LDMS_DAEMON_ARRAY_FILE"; then
	if ! test -f $LDMS_DAEMON_ARRAY_FILE; then
		echo "$myproc: cannot find $LDMS_DAEMON_ARRAY_FILE"
	else
		echo "$myproc: loading host array from $LDMS_DAEMON_ARRAY_FILE"
		. $LDMS_DAEMON_ARRAY_FILE
	fi
fi
echo "$myproc: Listing ldmsd's still running:"
pgrep ldmsd
echo "$myproc: Done."
export INPUT_DIR=$(dirname $input)
echo "$myproc: fast tmpfiles under $TESTDIR_FAST"
echo "$myproc: logs and data stored under $TESTDIR"

. $input

SLEEP 1
echo "$myproc: fast tmpfiles under $TESTDIR_FAST"
echo "$myproc: logs and data stored under $TESTDIR"
echo done;

if test "$KILL_LDMSD_STRICT" = "1"; then
	exit 1
fi;


